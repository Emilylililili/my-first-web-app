# 🌟 克拉日记 Web 应用 - 技术需求文档

## 1. 项目概述 (Overview)
开发一个支持富文本/Markdown编辑的个人笔记应用，集成待办事项功能，具备动态主题切换和现代化卡片式界面设计，数据存储在浏览器本地。

## 2. 核心功能点 (Core Features)
- ✍️ **富文本笔记编辑**：支持 Markdown 语法和所见即所得编辑
- 🏷️ **标签系统**：日常、工作、学习、娱乐四大分类
- 🔍 **全文搜索**：快速检索笔记内容
- ✅ **待办清单**：简单的任务管理功能
- 🎨 **动态主题**：星空、宇宙、蓝天白云等动态背景
- 💾 **本地存储**：浏览器 localStorage 数据持久化

## 3. 技术规格 (Technical Specifications)

### 3.1 前端 (Frontend)

#### 页面/组件 (Pages/Components)：
- **主导航栏 (Navbar)**：应用标题、主题切换器、搜索框
- **侧边栏 (Sidebar)**：笔记/待办切换、标签筛选、新建按钮
- **笔记页面 (Notes Page)**：
  - 笔记列表组件 (NotesList)
  - 笔记编辑器组件 (NoteEditor) - 支持 Markdown
  - 标签选择组件 (TagSelector)
- **待办页面 (Todo Page)**：
  - 待办列表组件 (TodoList)
  - 新建待办组件 (TodoCreator)
- **主题选择器 (ThemeSelector)**：动态背景选择面板
- **搜索结果页面 (SearchResults)**：搜索结果展示

#### 用户流程 (User Flow)：
1. 用户打开应用 → 显示笔记页面（默认显示所有笔记）
2. 点击侧边栏标签 → 筛选显示对应标签的笔记
3. 点击"新建笔记" → 打开编辑器 → 选择标签 → 保存
4. 点击现有笔记卡片 → 打开编辑模式
5. 切换到待办页面 → 查看/添加/完成待办事项
6. 使用搜索框 → 实时显示匹配结果
7. 点击主题切换器 → 选择动态背景主题

#### 数据交互 (Data Interaction)：
- **读取数据**：从 localStorage 获取笔记和待办数据
- **保存数据**：实时保存到 localStorage
- **搜索处理**：前端实现全文检索算法
- **主题管理**：保存用户主题偏好到 localStorage

### 3.2 后端 (Backend)
**注：由于是单机版应用，无需传统后端服务器**

#### 数据模型 (Data Models)：
```javascript
// 笔记数据结构
Note: {
  id: String (唯一标识符),
  title: String (笔记标题),
  content: String (Markdown 内容),
  tag: String (标签：'日常'|'工作'|'学习'|'娱乐'),
  createdAt: Date (创建时间),
  updatedAt: Date (更新时间)
}

// 待办事项数据结构
Todo: {
  id: String (唯一标识符),
  text: String (待办内容),
  completed: Boolean (完成状态),
  createdAt: Date (创建时间)
}

// 用户设置数据结构
Settings: {
  theme: String (当前主题：'starry'|'universe'|'bluesky'|'clouds'),
  lastActiveTab: String (上次活跃标签)
}
```

## 4. 技术栈建议 (Tech Stack Suggestion)
考虑到你是编程初学者，推荐以下技术栈：

- **前端框架**：Vue.js 3 + Vite（学习曲线平缓，文档友好）
- **UI 组件库**：Element Plus（提供现成的美观组件）
- **Markdown 编辑器**：@toast-ui/editor（功能强大的 Markdown 编辑器）
- **动画库**：CSS3 Animations + particles.js（用于动态背景效果）
- **图标库**：Element Plus Icons（统一的图标风格）
- **数据存储**：浏览器 localStorage API
- **构建工具**：Vite（快速的现代构建工具）

## 5. 开发步骤建议 (Development Steps)

### 阶段一：项目基础搭建 
1. 使用 Vite 创建 Vue.js 项目
2. 安装并配置 Element Plus
3. 创建基础的项目目录结构
4. 设计并实现基础的页面布局（导航栏 + 侧边栏 + 主内容区）

### 阶段二：笔记功能实现 
5. 集成 Markdown 编辑器组件
6. 实现笔记的 CRUD 操作（创建、读取、更新、删除）
7. 实现标签系统和筛选功能
8. 设计笔记卡片的样式和布局

### 阶段三：待办功能实现 
9. 创建待办事项页面和组件
10. 实现待办的添加、完成状态切换、删除功能
11. 设计待办列表的交互动画

### 阶段四：搜索功能 
12. 实现全文搜索算法
13. 创建搜索结果展示组件
14. 添加搜索高亮显示

### 阶段五：动态主题系统 
15. 创建主题选择器组件
16. 使用 CSS + particles.js 实现动态背景效果
17. 实现主题切换和状态保存

### 阶段六：数据持久化 
18. 实现 localStorage 数据管理
19. 添加数据导入/导出功能（备份）

### 阶段七：优化和完善 
20. 添加页面切换动画和交互动效
21. 响应式优化（虽然主要用于电脑，但适当优化总是好的）
22. 性能优化和 bug 修复
